Project Backlog
Team XFFS

Problem Statement
Power faults and fluctuations lead to poor integrity on flash storage. XFFS will be used as a filesystem that is fault-tolerant, atomic, and encryptable to prevent data failures and maintain security on flash storage and harddrives.


Background Information
Many devices use Flash storage for persistent storage. In situations where power fluctuates (batteries running out, power outages, pulling the plug), the integrity of these Flash- based file systems can be compromised, rendering the device degraded or useless. This problem is often solved by utilizing a transaction-based file system, in which write operations are atomic. However, no such file system exists today that also provides an interface for user-defined encryption.

Requirements

  Functional Requirements:
	* As a user, I would like to…	
	* As a developer I would like to…
	* As a user, I would like to be able to create a filesystem
	* As a user, I would like to be able to mount a filesystem
	* As a user, I would like to be able to unmount a filesystem
	* As a user, I would like to be able to add files to the filesystem
	* As a user, I would like to be able to remove files from the filesystem
	* As a user, I would like to be able to read files in the filesystem
	* As a user, I would like to be list all of the files in the filesystem
	* As a user, I would like to easily encrypt the files in the filesystem
	* As a user, I would like to easily decrypt the files in the filesystem
	* As a developer, I would like a simple set of commands for the filesystem
	* As a user, I would like an atomic filesystem
	* As a user, I would like dependable data in the event of power failure
	* As a user, I would like to maintain permissions of files
	

	
  Non-Functional Requirements:
	We must be able to implement this on many different devices.
	The encryption interface should work quickly.
