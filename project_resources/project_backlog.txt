Product Backlog – Team 22 
YFFS 
Team Members: Brian VerVaet, Max Molnar, Sam Spencer, Wyatt Dahlenburg, Zach Kent 
 
Problem Statement 
Power faults and fluctuations lead to poor integrity on flash storage. YFFS will be used as a filesystem that is fault-tolerany, atomic, and encryptable to prevent data failures and maintain security on flash storage and hard drives. Many devices use Flash storage for persistent storage. In situations where power fluctuates (batteries running out, power outages, pulling the plug), the integrity of these Flash- based file systems can be compromised, rendering the device degraded or useless. This problem is often solved by utilizing a transaction-based file system, in which write operations are atomic. However, no such file system exists today that also provides an interface for user-defined encryption. 
 
Background Information 
Audience 
Our target users consist of anyone using flash storage in need of a filesystem on an embedded device and want to secure the system with an encryption interface. The filesystem will be transactional and give users a safeguard should some power fluctuation compromise the state of the drive the user’s files are on. Additionally, we will have the opportunity to introduce our filesystem to users at Northrop Grumman. 
 
Similar Applications 
There is a considerably large number of filesystems available to the public for use. Some examples of specifically fault-tolerant systems that are open sourced to the public include XtreemFS, Tachyon, QFS, and MooseFS. These systems all come with their own list of implementation strengths and weaknesses and feature slightly differing preferred user stories. For example, XtreemFS is a distributed filesystem written mainly for networking hardware and systems.  
 
Limitations 
While a number of open source file systems exist, and some of those feature fault-tolerant safeguards, none we could find seem to implement any encryption, let alone user defined encryption. We aim to fix this in our filesystem by writing an interface or wrapper-class that will allow the user to have control over how the user’s files are encrypted.  


  Functional Requirements:
	* As a user, I would like to be able to create a filesystem
	* As a user, I would like to be able to add files to the filesystem
	* As a user, I would like to be able to remove files from the filesystem
	* As a user, I would like to be able to read files in the filesystem
	* As a user, I would like to be able to list all of the files in the filesystem
	* As a user, I would like dependable data in the event of power failure
	* As a user, I would like to create directories for files
	* As a user, I would like to use this filesystem on embedded devices
	* As a user, I would like complete documentation of the filesystem tools
	* As a developer, I would like a simple set of commands for the filesystem
	* As a developer, I would like an API to assist with the inclusion of encryption plug-ins
	* As an admin, I would like an atomic filesystem
	* As a admin, I would like to maintain permissions of files
	* As an admin, I would like to define encryption for all write and read operations to the filesystem
	* As an admin, I would like to define a hash for all filenames to be obfuscated
	
  Non-Functional Requirements:
	* We must be able to implement this on many different devices.
	* The encryption interface should work quickly.
	* The system will mount to embedded devices.
	* Documentation will be efficient and concise (explain command usage, functionality, etc.)
	* The interface should be user friendly
